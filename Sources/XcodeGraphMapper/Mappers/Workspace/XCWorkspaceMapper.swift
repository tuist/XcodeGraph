import Foundation
import Path
import PathKit
import XcodeGraph
import XcodeProj

/// A protocol defining how to map an `.xcworkspace` into a `Workspace` model.
///
/// Conforming types extract project references, shared schemes, and any other relevant data
/// to produce a high-level `Workspace` domain model.
protocol WorkspaceMapping {
    /// Maps the `.xcworkspace` into a `Workspace` domain model.
    ///
    /// This includes:
    /// - Identifying `.xcodeproj` references in the workspace data structure.
    /// - Mapping any shared schemes present in `xcshareddata/xcschemes`.
    ///
    /// - Parameter xcworkspace: The `XCWorkspace` to be mapped.
    /// - Returns: A fully constructed `Workspace` representing the workspace’s structure.
    /// - Throws: If reading projects or schemes fails.
    func map(xcworkspace: XCWorkspace) async throws -> Workspace
}

/// A mapper that converts an `.xcworkspace` into a `Workspace` model.
///
/// `XCWorkspaceMapper`:
/// - Locates all referenced Xcode projects (`.xcodeproj`) in the workspace data,
/// - Maps shared schemes (if any),
/// - Produces a `Workspace` model suitable for analysis or code generation.
struct XCWorkspaceMapper: WorkspaceMapping {
    private let schemeMapper: SchemeMapping

    /// Creates a new mapper that uses the provided `SchemeMapping` instance for scheme parsing.
    /// - Parameter schemeMapper: Defaults to `XCSchemeMapper()` for scheme resolution.
    init(schemeMapper: SchemeMapping = XCSchemeMapper()) {
        self.schemeMapper = schemeMapper
    }

    func map(xcworkspace: XCWorkspace) async throws -> Workspace {
        let xcWorkspacePath = xcworkspace.workspacePath
        let srcPath = xcWorkspacePath.parentDirectory

        let projectPaths = try await extractProjectPaths(
            from: xcworkspace.data.children,
            srcPath: srcPath
        )

        let workspaceName = xcWorkspacePath.basenameWithoutExt
        let schemes = try await mapSchemes(from: xcworkspace)

        let generationOptions = Workspace.GenerationOptions(
            enableAutomaticXcodeSchemes: nil,
            autogeneratedWorkspaceSchemes: .disabled,
            lastXcodeUpgradeCheck: nil,
            renderMarkdownReadme: false
        )

        return Workspace(
            path: srcPath,
            xcWorkspacePath: xcWorkspacePath,
            name: workspaceName,
            projects: projectPaths,
            schemes: schemes,
            generationOptions: generationOptions,
            ideTemplateMacros: nil,
            additionalFiles: []
        )
    }

    // MARK: - Private Helpers

    /// Recursively identifies all `.xcodeproj` files within the workspace structure.
    ///
    /// - Parameters:
    ///   - elements: The workspace elements (files/groups).
    ///   - srcPath: The workspace’s root directory for resolving relative references.
    /// - Returns: An array of absolute paths to `.xcodeproj` directories found in the workspace.
    private func extractProjectPaths(
        from elements: [XCWorkspaceDataElement],
        srcPath: AbsolutePath
    ) async throws -> [AbsolutePath] {
        var paths: [AbsolutePath] = []

        for element in elements {
            switch element {
            case let .file(ref):
                let refPath = try await ref.path(srcPath: srcPath)
                if refPath.fileExtension == .xcodeproj {
                    paths.append(refPath)
                }
            case let .group(group):
                // For each group, create a nested source path and recurse.
                let nestedSrcPath = srcPath.appending(component: group.location.path)
                let groupPaths = try await extractProjectPaths(
                    from: group.children,
                    srcPath: nestedSrcPath
                )
                paths.append(contentsOf: groupPaths)
            }
        }

        return paths
    }

    /// Maps any shared schemes defined within the `.xcworkspace`.
    ///
    /// Schemes are typically located under `xcshareddata/xcschemes`. If found,
    /// this method parses them and maps them into domain `Scheme` models.
    ///
    /// - Parameter xcworkspace: The workspace whose schemes should be mapped.
    /// - Returns: An array of `Scheme` instances for all shared schemes in the workspace.
    private func mapSchemes(from xcworkspace: XCWorkspace) async throws -> [Scheme] {
        let srcPath = xcworkspace.workspacePath.parentDirectory
        let sharedDataPath = Path(srcPath.pathString) + "xcshareddata/xcschemes"

        guard sharedDataPath.exists else {
            return []
        }

        let schemePaths = try sharedDataPath.children().filter { $0.extension == "xcscheme" }
        var schemes: [Scheme] = []
        for schemePath in schemePaths {
            let xcscheme = try XCScheme(path: schemePath)
            schemes.append(
                try await schemeMapper.map(
                    xcscheme,
                    shared: true,
                    graphType: .workspace(xcworkspace)
                )
            )
        }
        return schemes
    }
}
